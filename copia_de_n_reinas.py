# -*- coding: utf-8 -*-
"""Copia de N- reinas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_lesMm72dvyQIx6R4FCWqB651Y--5Cq7
"""

import random

class Tablero:
  def _init_(self,reinas):
    self.reinas = reinas
    self.generacion1=[]
    self.generacioneees=0

  def primera_generacion(self):
    if self.reinas<4 and self.generacion1!=None:
      raise Exception("error, ingrese una cantidad mayor a 3")
    padre_a, padre_b, padre_c, padre_d=[], [], [] ,[]
    
    while len(padre_a) < self.reinas:
      a=random.randint(1,self.reinas)
      padre_a.append(a)
    self.generacion1.append(padre_a)
  
    while len(padre_b) < self.reinas:
      b=random.randint(1,self.reinas)
      padre_b.append(b)
    self.generacion1.append(padre_b)
    
    while len(padre_c)<self.reinas:
      c=random.randint(1,self.reinas)
      padre_c.append(c)
    self.generacion1.append(padre_c)
    
    while len(padre_d)<self.reinas:
      d=random.randint(1,self.reinas)
      padre_d.append(d)
    self.generacion1.append(padre_d)
    return self.generacion1

  def evaluacion(self,lista):
    indice=[0,0,0,0]
    for i in range(0,4):
      for j in range(0,self.reinas-1):
        for k in range(j+1,self.reinas):
          if lista[i][j]== lista[i][k]:
            indice[i]+=1
          if lista[i][j]-lista[i][k]== j-k or lista[i][j]-lista[i][k]==k-j:
            indice[i]+=1
    return indice

  def puntuacion_padres(self,lista):
    puntuacion=self.evaluacion(lista)
    print("Los individuos son:\n{} , {} , {} , {}\n"
        "\nLas puntuaciones de los padres son:"
    "\nPadre 1 = {} punto(s), Padre 2 = {} punto(s),"
    " Padre 3 = {} punto(s), Padre 4 = {} punto(s)".format(lista[0],lista[1],lista[2],lista[3],
                                                           puntuacion[0],puntuacion[1],puntuacion[2],puntuacion[3]))
    if puntuacion[0] == 0:
      print("\nel individuo numero: {} es una solucion\nGracias por usar :D".format(1))
      
    if puntuacion[1] == 0:
      print("\nel individuo numero: {} es una solucion\nGracias por usar :D".format(2))
      
    if puntuacion[2] == 0:
      print("\nel individuo numero: {} es una solucion\nGracias por usar :D".format(3))
      
    if puntuacion[3] == 0:
      print("\nel individuo numero: {} es una solucion\nGracias por usar :D".format(4))
      
    elif puntuacion[0] != 0 and puntuacion[1] != 0 and puntuacion[2] != 0 and puntuacion[3] != 0:
       print("\nninguno es solucion :c")
    
  def Ordenamiento(self,lista):
    Seleccion=self.evaluacion(lista)
    if Seleccion[0]==Seleccion[1] and Seleccion[0]==Seleccion[2] and Seleccion[3]:
      return lista
    Ordenada=sorted(Seleccion)
    papa,A,B,C,D=[],[],[],[],[]
    for i in range(0,4):
        if Ordenada[0]==Seleccion[0]:
          A=lista[0]
        elif Ordenada[0]==Seleccion[i]:
          A=lista[i]
    lista.remove(A)
    Ordenada.pop(0)
    for j in range(0,3):
        if Ordenada[0]==Seleccion[1] :
          B=lista[0]
        else:
          B=lista[j]
    lista.remove(B)
    Ordenada.pop(0)
    for k in range(0,2):
        if Ordenada[0]==Seleccion[2]:
          C=lista[0]
        else:
          C=lista[k]
    lista.remove(C)
    Ordenada.pop(0)
    D=lista[0]       
    papa=[A, B, C, D]
    return papa

class Cruce(Tablero): 
  def __init__(self,reinas):
    self.reinas=reinas
    super()._init_(self.reinas)
  

  def cruce(self,lista):
    PadresOrdenados=lista
    padre1,padre2,padre3,padre4=PadresOrdenados[0],PadresOrdenados[1],PadresOrdenados[2],PadresOrdenados[3]
    hijo1,hijo2,hijo3,hijo4=[],[],[],[]
    Hijos=[]
    PuntoCruce1=0
    PuntoCruce2=0
    X=0
    while X==0:
      for i in range(0,self.reinas-1):
        for j in range(i+1,self.reinas):
          if padre1[i]-padre1[j] > 1 and i-j==-1 or padre1[j]-padre1[i] < -1 and j-i==-1:
            PuntoCruce1=+1
          if padre2[i]-padre2[j] > 1 and i-j == -1 or padre2[j]-padre2[i] < -1 and i-j==-1:
            PuntoCruce2=+1
          else:
            X=+1
    
    puntomutacion1,puntomutacion2=random.randint(PuntoCruce1,self.reinas-1),random.randint(PuntoCruce1,self.reinas-1)
    puntomutacion3,puntomutacion4=random.randint(PuntoCruce2,self.reinas-1),random.randint(PuntoCruce2,self.reinas-1)
    
    numeromutacion1,numeromutacion2=random.randint(1,self.reinas),random.randint(1,self.reinas)
    numeromutacion3,numeromutacion4=random.randint(1,self.reinas),random.randint(1,self.reinas)
    
    if padre1!=padre2 or padre2!=padre3:
      hijo1, hijo2, hijo3, hijo4=padre1[0:PuntoCruce1], padre2[0:PuntoCruce1], padre2[0:PuntoCruce2],padre3[0:PuntoCruce2]
      hijo1.extend(padre2[PuntoCruce1:])
    
      hijo2.extend(padre1[PuntoCruce1:])
      
      hijo3.extend(padre3[PuntoCruce2:])
    
      hijo4.extend(padre2[PuntoCruce2:])
      
      hijo1.pop(puntomutacion1)
      hijo1.insert(puntomutacion1,numeromutacion1)
      
      hijo2.pop(puntomutacion2)
      hijo2.insert(puntomutacion2,numeromutacion2)
      
      hijo3.pop(puntomutacion3)
      hijo3.insert(puntomutacion3,numeromutacion3)

      hijo4.pop(puntomutacion4)
      hijo4.insert(puntomutacion4,numeromutacion4)
    
    elif padre1==padre2 and padre2==padre3:
      hijo1,hijo2,hijo3,hijo4=padre1,padre1,padre2,padre2

      hijo1.pop(puntomutacion1)
      hijo1.insert(puntomutacion1,numeromutacion1)

      hijo2.pop(puntomutacion1)
      hijo2.insert(puntomutacion2, numeromutacion2)

      hijo3.pop(puntomutacion3)
      hijo3.insert(puntomutacion3, numeromutacion3)

      hijo4.pop(puntomutacion4)
      hijo4.insert(puntomutacion4, numeromutacion4)
    Hijos=[hijo1, hijo2, hijo3, hijo4]
    
    return Hijos
    
  def Start(self):

    eval=self.evaluacion(self.generacion1)
    self.puntuacion_padres(self.generacion1)
    
    if eval[0]==0 or eval[0]==0 or eval[0]==0 or eval[0]==0 :
      quit(keep_kernel=True)  
    
    Generacion=0
    MaxGeneraciones=100000
    
    for i in range(MaxGeneraciones):
      Generacion+=1
      cruza=self.cruce(self.generacion1)
      evaluacioncruza=self.evaluacion(cruza)
      if evaluacioncruza[0]==0 or evaluacioncruza[1]==0 or evaluacioncruza[2]==0 or evaluacioncruza[3]==0 :
        
        self.puntuacion_padres(cruza)
        print("\n se encontro en la generacion",Generacion)
        break
      else:
        self.generacion1=self.cruce(cruza)

  
    
      
obj=Cruce(7)
obj.primera_generacion()
obj.Start()